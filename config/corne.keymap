/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        lpht: lpht {
            compatible = "zmk,behavior-hold-tap";
            label = "LPHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 22 34 33 21 20 19 18 30 31 32 11 23 35 41 40 39>;
            retro-tap;
        };

        rpht: rpht {
            compatible = "zmk,behavior-hold-tap";
            label = "RPHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <29 17 5 4 3 2 3 4 14 15 16 26 27 28 1 13 25 0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "tap-preferred";
            retro-tap;
        };

        meh: meh {
            compatible = "zmk,behavior-hold-tap";
            label = "MEH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            retro-tap;
            hold-trigger-key-positions = <16 15 14 13>;
        };

        colon_semi: colon_semi {
            compatible = "zmk,behavior-tap-dance";
            label = "COLON_SEMI";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp ESCAPE  &kp Q  &kp W         &kp F          &kp P          &kp B        &kp J                         &kp L          &kp U          &kp Y         &kp SEMI   &kp BACKSPACE
&kp TAB     &kp A  &lpht LALT R  &lpht LMETA S  &lpht LCTRL T  &kp G        &kp M                         &rpht RCTRL N  &rpht RMETA E  &rpht RALT I  &kp O      &kp BACKSPACE
&kp LSHIFT  &kp Z  &kp X         &kp C          &kp D          &kp V        &kp K                         &kp H          &kp COMMA      &kp PERIOD    &kp SLASH  &kp RSHIFT
                                 &mo 1          &mo 2          &kp ENTER    &meh RA(RC(RG(RSHFT))) SPACE  &mo 3          &mo 4
            >;
        };

        navigation {
            bindings = <
&trans  &trans          &trans    &trans    &trans     &trans    &trans  &kp LS(LG(LEFT_BRACKET))  &kp UP_ARROW    &kp LS(LG(RIGHT_BRACKET))  &trans  &trans
&trans  &kp LEFT_SHIFT  &kp LALT  &kp LGUI  &kp LCTRL  &trans    &trans  &kp LEFT_ARROW            &kp DOWN_ARROW  &kp RIGHT                  &trans  &trans
&trans  &trans          &trans    &trans    &trans     &trans    &trans  &trans                    &trans          &trans                     &trans  &trans
                                  &trans    &trans     &trans    &trans  &trans                    &trans
            >;
        };

        number_layer {
            bindings = <
&trans  &kp F1        &kp F2               &kp F3               &kp F4                &kp F5          &kp F6        &kp F7                &kp F8               &kp F9                    &kp F10  &trans
&trans  &kp NUMBER_1  &lpht LALT NUMBER_2  &lpht LGUI NUMBER_3  &lpht LCTRL NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &rpht RCTRL NUMBER_7  &rpht RGUI NUMBER_8  &rpht RIGHT_ALT NUMBER_9  &kp N0   &trans
&trans  &trans        &trans               &trans               &trans                &trans          &trans        &trans                &trans               &trans                    &trans   &trans
                                           &trans               &trans                &trans          &trans        &trans                &trans
            >;
        };

        special_characters {
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT            &kp HASH          &kp DOLLAR                &kp SLASH               &kp BACKSLASH          &kp PERCENT                &kp CARET        &kp AMPS          &kp ASTRK  &kp DELETE
&trans     &trans           &lpht LALT MINUS  &lpht LGUI COLON  &lpht LCTRL LEFT_BRACKET  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &rpht RCTRL RIGHT_BRACKET  &rpht RGUI SEMI  &rpht RALT UNDER  &trans     &trans
&trans     &trans           &trans            &trans            &kp DOUBLE_QUOTES         &kp LESS_THAN           &kp GREATER_THAN       &kp SINGLE_QUOTE           &trans           &trans            &trans     &trans
                                              &mo 5             &trans                    &trans                  &trans                 &trans                     &trans
            >;
        };

        media {
            bindings = <
&trans         &trans  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp LS(LG(NUMBER_3))    &kp LS(LG(N5))  &trans         &kp C_BRI_UP   &trans         &trans  &trans
&kp LC(LG(Q))  &trans  &kp C_PREV  &kp C_PP           &kp C_NEXT    &kp LC(UP_ARROW)        &trans          &kp C_BRI_MIN  &kp C_BRI_DEC  &kp C_BRI_MAX  &trans  &trans
&trans         &trans  &trans      &trans             &trans        &kp LC(DOWN_ARROW)      &trans          &trans         &trans         &trans         &trans  &trans
                                   &trans             &trans        &trans                  &trans          &trans         &trans
            >;
        };

        bt {
            bindings = <
&bt BT_CLR     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&kp LC(LG(Q))  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans         &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                           &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
